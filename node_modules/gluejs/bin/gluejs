#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    Glue = require('../index.js'),
    Minilog = require('minilog');

var opts = require('optimist')
    .usage('Usage: $0 --include <file/dir ...> --out filename.js')
    .options({
      'include': {
        describe: 'Path to import.'
      },
      'exclude': {
        describe: 'JS regular expression string to match against the included paths',
      },
      'out': {
        describe: 'File to write. Default: stdout'
      },
      'global': {
        describe: 'Name of the global to export. Default: "Foo"',
      },
      'basepath': {
        describe: 'Base path for the list of files. Default: process.cwd().',
        'default': process.cwd()
      },
      'main': {
        describe: 'Name of the main file/module to export. Default: index.js',
        'default': 'index.js'
      },
      'replace': {
        describe: 'Bind require("name") to an expression, e.g. --replace jQuery=window.$'
      },
      'remap': {
        describe: 'Remap require("name") to another (internal) module e.g. --replace "assert=require(\'chai\').assert"'
      },
      'source-url': {
        describe: 'Add source URL annotations to the files. Useful for development, ' +
                  'but note that they are not compatible with IE.'
      },
      'global-require': {
        describe: 'Export the require() implementation into the global space.'
      },
      'amd': {
        describe: 'Export the module via the require.js AMD define("name", ...) using the name specified in --global. Note that the requirejs will not pick up modules defined like this unless you do at least one asynchronous require() call.'
      },
      'command': {
        describe: 'Pipe each file through a shell command and capture the output (e.g. --command "uglifyjs --no-copyright").'
      },
      'cache': {
        describe: 'Use a cache directory to store file builds. The cache speeds up large builds (and minified builds) significantly since only source files that have changed are updated.'
      },
      'silent': {
        describe: 'Disable all output, including the reporter.'
      },
      'verbose': {
        describe: 'More verbose output, such as files being filtered out and processed.'
      },
      'version': {
        describe: 'Version info'
      }
    }),
    argv = opts.parse(process.argv);

if(argv['version'] || argv['v'] ) {
  console.log(require('../package.json').version);
  process.exit();
}

if(!argv['include']) {
  console.log(opts.help());
  process.exit();
}

var g = new Glue();

// --include
g.include(argv['include']);

// --exclude
if(argv['exclude']) {
  g.set('exclude', argv['exclude']);
}

// --amd
if(argv['amd']) {
  g.set('amd', argv['amd']);
}

// --global
g.export(argv['global']);

// --basepath
g.basepath(argv['basepath']);

// --main
g.main(argv['main'])

// --replace
if(argv['replace']) {
  // allow --replace foo=bar,baz=abc or --replace foo=bar --replace bar=abc
  if(Array.isArray(argv['replace'])) {
    argv['replace'].forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  } else {
    argv['replace'].split(',').forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  }

}
if(argv['remap']) {
  (Array.isArray(argv['remap']) ? argv['remap'] : [argv['remap']]).forEach(function(item) {
    var pos = item.indexOf('='),
        name = item.substring(0, pos),
        value = item.substring(pos+1);
    g.remap(name, value);
  });
}

// --silent
// if not explicitly disabled and output is defined
if(!argv['silent'] && argv['out']) {
  g.set('report', true);
}

if(argv['verbose']) {
  g.set('report', true);
  Minilog.enable();
}

if(argv['source-url']) {
  g.set('source-url', true);
}

if(argv['global-require']) {
  g.set('global-require', true);
}

if(argv['cache']) {
  g.set('cache', path.resolve(process.cwd(), argv['cache']));
}

if(argv['command']) {
  g.set('command', argv['command'].split(' '));
}

if(argv['npm']) {
  process.stderr.write('Warning: the --npm flag is deprecated. ' +
    'Directly include the file path to module, e.g. --include ./node_modules/foo instead.\n');
}

// -- out
if(argv['out']) {
  g.render(fs.createWriteStream(argv['out']));
} else {
  g.render(process.stdout);
}
